class Type{static objectWithDefaultValue(e){return new Proxy({},{get:function(t,n){return n=n.toLowerCase(),t.hasOwnProperty(n)||(t[n]=e()),t[n]}})}static uniqueArray(e=[]){return new Proxy(e,{get:(e,t)=>"push"===t?function(...t){return t.forEach((t=>{e.includes(t)||Array.prototype.push.call(e,t)})),e.length}:"filter"===t?function(...t){const n=Array.prototype.filter.apply(e,t);return Type.uniqueArray(n)}:Reflect.get(e,t)})}}class KeyboardActionsConfig{element=document;logKeys=!0;keepDefault=!0;isAutoKeyOrdering=!0;preActionHook=()=>{};postActionHook=()=>{}}class Utils{static onWindowChange(e){window.addEventListener("blur",e),window.addEventListener("focus",e),window.addEventListener("focusin",e),window.addEventListener("focusout",e),window.addEventListener("close",e)}}class ClickManager{constructor(e){this.config=e,this.currentClickedButtons=Type.uniqueArray(),this.buttonActions=Type.objectWithDefaultValue((()=>[]))}logKeys(){this.currentClickedButtons;this.config.logKeys}clear=e=>{this.currentClickedButtons=Type.uniqueArray()};keyDownMethod=e=>{this.config.keepDefault||e.preventDefault();const t=this.getKeyName(e.key);this.currentClickedButtons.push(t);const n=this.getKeyActions();this.config.preActionHook(),n.length&&(n.map((t=>t(e))),this.clear()),this.config.postActionHook(),this.logKeys()};keyUpMethod=e=>{const t=this.getKeyName(e.key);this.currentClickedButtons=this.currentClickedButtons.filter((e=>e!==t)),this.logKeys()};getKeyActions(){let e=this.currentClickedButtons;return this.buttonActions[this.getCombinedKeysName(e)]}getCombinedKeysName(e){let t=[...e];return this.config.isAutoKeyOrdering&&t.sort(),t.join(" + ")}getKeyName(e){let t;if("string"==typeof e&&e.includes("+")&&(e=e.split("+").map((e=>e.trim()))),"string"==typeof e)t={" ":"Space","+":"Plus","-":"Minus"}[e]||e;else{if(!Array.isArray(e))throw new Error("invalid key type");e=e.map((e=>this.getKeyName(e))),t=this.getCombinedKeysName(e)}return t}}class EventsManager{constructor(e){this.events=[],this.config=e}addEventListener(e,t){this.events.push([e,t]),this.config.element.addEventListener(e,t)}remove(){this.events.forEach((([e,t])=>this.config.element.removeEventListener(e,t))),this.events=[]}}class KeyboardActions{constructor(){this.config=new KeyboardActionsConfig,this.clickManager=new ClickManager(this.config),this.eventsManager=new EventsManager(this.config),this.isRunning=!1}start(){this.isRunning||(this.isRunning=!0,this.eventsManager.addEventListener("keydown",this.clickManager.keyDownMethod),this.eventsManager.addEventListener("keyup",this.clickManager.keyUpMethod),Utils.onWindowChange(this.clickManager.clear))}stop(){this.eventsManager.remove(),this.isRunning=!1}addKeyAction(e,t){let n=this.clickManager.getKeyName(e);this.clickManager.buttonActions[n].push(t)}clearKeyAction(e){let t=this.clickManager.getKeyName(e);this.clickManager.buttonActions[t]=[]}}"undefined"!=typeof exports&&(module.exports=KeyboardActions);